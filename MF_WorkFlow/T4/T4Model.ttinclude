<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="$(SolutionDir)\MFTool\\bin\\Debug\\MFTool.dll" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="MFTool" #>

<#+
 public class T4Manager
    {	
        public static List<T4Model> GetModelClasses(string modelPath, string baseEntityName)
        {
            List<T4Model> results = new List<T4Model>();
			//Assembly ab = Assembly.LoadFrom(modelPath);
			Assembly ab = Assembly.Load(File.ReadAllBytes(modelPath));
            var types = ab.GetLoadableTypes();
            foreach (Type type in types)
            {
                if (type.BaseType.Name == baseEntityName)
                {
                    T4Model t4 = new T4Model();
                    t4.ClassName = type.Name;
                    t4.FullName = type.FullName;
                    t4.NameSpace = type.Namespace;
					var idProp = type.GetProperty("Id");
					if(idProp != null)
					{
					    t4.IdTypeName = idProp.PropertyType.Name;
					}
					t4.AssemblyName = ab.GetName().Name;
					//获取可级联删除的子表相关数据
				    var propertyInfos = type.GetProperties().Where(a => a.PropertyType.Name == "List`1" && a.GetAccessors().Any(b => b.IsVirtual));
					foreach (var prop in propertyInfos)
                    {
						T4ModelProp t4ModelProp = new T4ModelProp();
						t4ModelProp.PropName = prop.Name;
						t4ModelProp.IsSubTable = false;
					    var innerType = prop.PropertyType.GenericTypeArguments[0];
                        //基类必须是Entity                       
                        if (innerType.BaseType.Name == "Entity")
                        {
                             t4ModelProp.IsSubTable = true;
                        }
						t4.T4ModelPropList.Add(t4ModelProp);
					}
                    results.Add(t4);
                }
            }
            return results;
        }
    }

    public class T4Model
    {
        public string FullName { get; set; }
        public string ClassName { get; set; }
        public string NameSpace { get; set; }
		public string AssemblyName { get; set; }
		public string IdTypeName { get; set; }
		public List<T4ModelProp> T4ModelPropList { get; set; }

		public T4Model()
		{
		    T4ModelPropList = new List<T4ModelProp>();
		}

        public string SecondDirectory()
        {
            List<string> resList = new List<string>();
            resList = FullName.Split('.').ToList(); 
			foreach(var ass in AssemblyName.Split('.').ToList())
			{
			    resList.Remove(ass);
			}        
            resList.Remove(ClassName);
            if (resList.Count > 0)
            {
				return resList[0];
            }

            return "";//error
        }

		public string SecondDirectoryWithDoubleBackslash()
		{
		    string res = SecondDirectory();
			if(res!="")
			{
				res+="\\";
			}
			return res;
		}

		public string PointWithSecondDirectory()
		{
		    string res = SecondDirectory();
			if(res!="")
			{
				res="."+res;
			}
			return res;
		}
    }

	public class T4ModelProp
	{		
		public string PropName { get; set; }
		public bool IsSubTable { get; set; }
	}
#>